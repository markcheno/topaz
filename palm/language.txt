Topaz scripts consist of one or more statements.

Identifiers and keywords are case sensitive.

Comments start with a "#" and continue until the next carriage return. The main form will display the first line of a script as a title, so it is good practice to start a script with a one line descriptive comment.

Variables and constants must be defined before they can be used. Variables start with a lowercase letter and are declared by assigning a value to them. Constants start with an uppercase letter and are also declared by assigning a value to them. Once declared, constants cannot be changed. Variables do not have types, the value has a type. The three basic types are: Integer, Real, and String. String values can be delimited by either single or double quotes. Topaz does automatic type conversions when necessary. Variables and constants declared inside of a method have local scope and are only visible in that method. Variables and constants declared outside methods have global scope but are only available after they are declared.

Arrays are declared with an array initializer: array=[size]
For example: 
x=[10]
will declare x as an array of 10 integers (initialized to zero) indexed from 0-9.

Methods must be after any global variable and/or constant declarations and before the main code statements. All methods return an integer zero unless the optional return statement is used. A return statement must be the last statement in the method.
 
Statements can be separated by an optional semicolon. In addition, the "then" or "do" keywords are optional.

Basic statement syntax is as follows:

variable = Expr
CONSTANT = Expr

func Function(p1,p2)
  StmtList
  return Expr
end

if Expr then
  StmtList
elsif Expr then
  StmtList
else 
  StmtList
end

unless Expr then
  StmtList
else 
  StmtList
end

case Expr
when Expr1 then
  StmtList
when Expr2 then
  StmtList
else 
  StmtList
end

for(Init;Cond;Incr)
  StmtList 
end

while Expr do
  StmtList
end

until Expr do
  StmtList
end

A break statement can be used to break out of loops.

Operators are as follows:

==  <>  <  <=  >  >=
+  - || or
*  /  &&  and  %  mod
not !
